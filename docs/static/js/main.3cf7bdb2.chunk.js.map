{"version":3,"sources":["logo.svg","reducers/index.js","store/index.js","actions/index.js","components/song/index.js","components/songList/index.js","components/addSong/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","songs","title","performer","id","rootReducer","state","arguments","length","undefined","action","type","Object","assign","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","setSongs","ConnectedSong","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteMethod","bind","assertThisInitialized","setData","fetchSongs","responseData","console","log","_this2","url","URL","request","Request","method","mode","fetch","then","response","json","catch","error","e","_this3","preventDefault","react_default","a","createElement","value","onClick","Component","Song","connect","dispatch","ConnectedSongList","map","item","song","key","SongList","ConnectedAddSong","addSong","form","FormData","document","getElementById","body","name","AddSong","App","className","songList","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3cf7bdb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const initialState={\n\tsongs:[{title:'prva pesma', performer:'neki neko', 'id':1\n\n\t},{title:'druga pesma', performer:'neko drugi', 'id':2}],\n}\n\nconst rootReducer=(state=initialState, action)=>{\n    switch (action.type) {\n\tcase \"SONGS\":\n    return Object.assign({},state, {songs:action.songs});\n\n    default:\n    return state;\n\n}\n};\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  /*ovo iznad je dodato da bi radila ekstenzija za redux na chromu...*/\n  );\n\nexport default store;\n","export const setSongs=songs=>(\n    {type:\"SONGS\",\n    songs:songs}\n    )","import React, {Component} from 'react'\nimport ReactDOM from 'react-dom';\nimport {setSongs } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport './style.css';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    setSongs: songs=>dispatch(setSongs(songs))\n  };\n};\n\nclass ConnectedSong extends Component{\n\n\tconstructor(props) {\n    super(props);\n   \n    this.deleteMethod=this.deleteMethod.bind(this);\n    this.setData=this.setData.bind(this);\n    this.fetchSongs=this.fetchSongs.bind(this);\n\n  }\n\n  setData(responseData){\n  console.log(responseData);\n  this.props.setSongs(responseData); \n }\n\n\tfetchSongs(){\n\t\tconst url=new URL('https://radmilatomic.pythonanywhere.com/api/songs')\n    const request=new Request(url,{\n    method:'GET',\n    mode:'cors'\n   });\n\n   fetch(request).then(response=>\n     response.json()).then(responseData=>this.setData(responseData))\n     .catch(function(error){console.log(error);})\n\t}\n\n\tdeleteMethod(e){\n\t\te.preventDefault();\n\t\tconsole.log(\"deleting will be implemented here\");\n\t\tconst url=new URL('https://radmilatomic.pythonanywhere.com/api/deletesong/'+this.props.id)\n    \tconst request=new Request(url,{\n    \tmethod:'GET',\n    \tmode:'no-cors'\n   });\n\n   fetch(request).then(()=>this.fetchSongs())\n     .catch(function(error){console.log(error);})\n\n   \n\t}\n\trender(){\n\n\n\treturn(\n\t\t<div id=\"songContainer\">\n  \t\t<div id=\"songTitle\">{this.props.title}</div>\n  \t\t\n  \t\t<div id=\"songPerformer\">{this.props.performer}</div>\n  \t\t\n  \t\t<input type=\"submit\" value=\"Delete\" onClick={this.deleteMethod}></input>\n\t\t</div>\n\n\t)\n}\n}\n\nconst Song=connect(null,mapDispatchToProps)(ConnectedSong)\nexport default Song","import React, {Component} from 'react'\nimport { connect } from \"react-redux\"; \nimport './style.css';\nimport { setSongs} from \"../../actions\";\nimport Song from '../song'\n\nconst mapDispatchToProps = dispatch => {\n return {\n  setSongs: songs => dispatch(setSongs(songs))\n  \n };\n};\n\nconst mapStateToProps = state => {\n return { songs: state.songs\n  }\n}\n\n\n\nclass ConnectedSongList extends Component{\n\n\tsetData(responseData){\n  console.log(responseData);\n  this.props.setSongs(responseData); \n }\n\ncomponentDidMount(){\n  \n   const url=new URL('https://radmilatomic.pythonanywhere.com/api/songs')\n   const request=new Request(url,{\n    method:'GET',\n    mode:'cors'\n   });\n\n   fetch(request).then(response=>\n     response.json()).then(responseData=>this.setData(responseData))\n     .catch(function(error){console.log(error);})\n  \n}\n\n\trender(){\n\t\treturn(\n\t\t<div id=\"songList\">\n\t\t{this.props.songs.map((item)=><Song title={item.title} performer={item.performer} key={item.id} id={item.id}/>)}\n\t\n\t\t</div>\n\t\t)\n\t}\n}\n\nconst SongList=connect(mapStateToProps,mapDispatchToProps)(ConnectedSongList)\nexport default SongList","import React, {Component} from 'react'\nimport {setSongs } from \"../../actions\";\nimport { connect } from \"react-redux\";\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n    setSongs: songs=>dispatch(setSongs(songs))\n  };\n};\n\n\nclass ConnectedAddSong extends Component{\n\n\tconstructor(props) {\n    super(props);\n    this.fetchSongs=this.fetchSongs.bind(this);\n     this.addSong=this.addSong.bind(this);\n     this.setData=this.setData.bind(this);\n     \n  }\n\n  setData(responseData){\n  console.log(responseData);\n  this.props.setSongs(responseData); \n }\n\n\tfetchSongs(){\n\tconst url=new URL('https://radmilatomic.pythonanywhere.com/api/songs')\n    const request=new Request(url,{\n    method:'GET',\n    mode:'cors'\n   });\n\n   fetch(request).then(response=>\n     response.json()).then(responseData=>this.setData(responseData))\n     .catch(function(error){console.log(error);})\n\t}\n\n\taddSong(e){\n\t\tconsole.log(\"song will be added here\");\n\t\te.preventDefault()\n    var form=new FormData(document.getElementById('form'))\n   const url=new URL('https://radmilatomic.pythonanywhere.com/api/addsong')\n   const request=new Request(url,{\n    method:'POST',\n    body:form,\n    mode:'cors'\n   });\n   fetch(request).then(()=>this.fetchSongs())\n     .catch(function(error){console.log(error);})\n\n  \n\t}\n\trender(){\n\treturn(\n\t\t<form  id=\"form\">\n    <div>\n\t\tTitle:<input name=\"title\"></input></div>\n    <div>\n\t\tPerformer:<input name=\"performer\"></input>\n\n\t\t<input  type =\"submit\" value =\"Add\" onClick={this.addSong}/>\n    </div>\n\t\t</form>\n\n\t)\n}\n}\n\nconst AddSong=connect(null,mapDispatchToProps)(ConnectedAddSong)\n\nexport default AddSong","import React, { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Song from './components/song'\nimport SongList from './components/songList'\nimport AddSong from './components/addSong'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>ovo je moja playlista, al dodaj i ti slobodno neku pesmu</div>\n       <AddSong/>\n       <SongList/>\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n\t <Provider store={store}>\n   <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}